 
NMD=load('./NMD.mat');

[tmp,str.main]=system('pwd');
NMD.NUM_TSTEPS=NMD.t_fft/NMD.t_step
NMD.w_step = 2*pi/(NMD.t_fft*NMD.dt); NMD.w_max = 2*pi/(NMD.t_step*NMD.dt*2);
NMD.NUM_OMEGAS = NMD.t_fft/(2*NMD.t_step);  

%---ISEED------------------------------------------------------------------
    iseed = ISEED;
%--------------------------------------------------------------------------

%---IKSLICE----------------------------------------------------------------
    imslice = IMSLICE;
%-------------------------------------------------------------------------- 

    
for ifft = 1:(NMD.t_total/NMD.t_fft) 
%VElOCITIES
    str_read=...
        strcat(...
        str.main ,'/dump_',int2str(iseed),'_',int2str(ifft),'.vel');
    fid=fopen(str_read);
    dummy = textscan(fid,'%f%f%f','Delimiter',' ','commentStyle', '--'); 
    fclose(fid);
%Store velocity data of all atoms: subtract off the last time step
    velx = zeros(NMD.NUM_ATOMS,NMD.NUM_TSTEPS);
    vely = zeros(NMD.NUM_ATOMS,NMD.NUM_TSTEPS);
    velz = zeros(NMD.NUM_ATOMS,NMD.NUM_TSTEPS);
%--------------------------------------------------------------------------
tic  
%--------------------------------------------------------------------------
    for iatom = 1:NMD.NUM_ATOMS  
        velx(iatom,1:NMD.NUM_TSTEPS) =...
            dummy{1}...
            (iatom:NMD.NUM_ATOMS:(length(dummy{1}(:))-NMD.NUM_ATOMS));
        vely(iatom,1:NMD.NUM_TSTEPS) =...
            dummy{2}...
            (iatom:NMD.NUM_ATOMS:(length(dummy{1}(:))-NMD.NUM_ATOMS));
        velz(iatom,1:NMD.NUM_TSTEPS) =...
            dummy{3}...
            (iatom:NMD.NUM_ATOMS:(length(dummy{1}(:))-NMD.NUM_ATOMS));
    end
%--------------------------------------------------------------------------
toc
%--------------------------------------------------------------------------
%Remove dummy
    clear dummy  
%Set mass array
%     m = repmat(NMD.mass(:,1),1,NMD.NUM_TSTEPS);     
%    m = NMD.mass(:,1);
    m = NMD.x0.pos(:,2);
%EIGENVECTORS
    eigenvec =...
        dlmread(...
        strcat(...
        NMD.str.main,'/eigvec.dat') );
           
%Zero main SED FP: this gets averaged as you loop over the NUM_FFTS      
    Q = zeros(1,NMD.NUM_TSTEPS);
    QDOT = zeros(1,NMD.NUM_TSTEPS);
    
    %SED.SED(...
    %size(NMD.kptmaster(:,1:3),1),...
    %1:(NMD.NUM_TSTEPS/2),1:size(NMD.modelist(:,imslice),1)) = 0.0;
    SED.SED = zeros( size(NMD.kptmaster(:,1:3),1),...
    1:(NMD.NUM_TSTEPS/2),1:size(NMD.modelist(:,imslice),1));

%--------------------------------------------------------------------------
tic  
%--------------------------------------------------------------------------
    for ikpt = 1:size(NMD.kptmaster(:,1:3),1)
        for imode = 1:size(NMD.modelist(:,imslice),1)
            
            spatial = 2*pi*1i*(...
    NMD.x0(:,3)*( (NMD.kptmaster(ikpt,1))/(NMD.alat*NMD.Nx) ) +...
    NMD.x0(:,4)*( (NMD.kptmaster(ikpt,2))/(NMD.alat*NMD.Ny) ) +...
    NMD.x0(:,5)*( (NMD.kptmaster(ikpt,3))/(NMD.alat*NMD.Nz) ) );

%             SPATIAL = repmat(spatial,1,NMD.NUM_TSTEPS);
            
%WARNING: :3:, where PRIM has :1: (: implicit) for CONV, must use 
    
    kindex = NMD.kptmaster_index(ikpt);
            
            eigx = repmat(...
                conj(...
                eigenvec(...
                ((NMD.NUM_ATOMS_UCELL*3)*(kindex-1)+1)... 
                :3:...
                ((NMD.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),NMD.NUM_UCELL_COPIES,1);
            
            eigy = repmat(... 
                conj(...
                eigenvec(...
                ((NMD.NUM_ATOMS_UCELL*3)*(kindex-1)+2)... 
                :3:...
                ((NMD.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),NMD.NUM_UCELL_COPIES,1);
            
            eigz = repmat(...
                conj(...
                eigenvec(...
                ((NMD.NUM_ATOMS_UCELL*3)*(kindex-1)+3)... 
                :3:...
                ((NMD.NUM_ATOMS_UCELL*3)*kindex),imode...
                )...
                ),NMD.NUM_UCELL_COPIES,1);

            QDOT = sum(...
                bsxfun(@times,...
                bsxfun(@times, velx, eigx) + ...
                bsxfun(@times, vely, eigy) + ...
                bsxfun(@times, velz, eigz) ...
                , exp(spatial).*(sqrt(m/NMD.NUM_UCELL_COPIES)) )...
                , 1 );

            KEXCORR = xcorr(QDOT,'coeff');

            KEFFT = real(...
                fft(...
                KEXCORR(NMD.NUM_TSTEPS:NMD.NUM_TSTEPS*2-1))).^2 ... 
                + imag(...
                fft(...
                KEXCORR(NMD.NUM_TSTEPS:NMD.NUM_TSTEPS*2-1))).^2;
            
        SED.SED(ikpt,:,imode) =...
            SED.SED(ikpt,:,imode)+KEFFT(1:(NMD.NUM_TSTEPS/2)) ;
        pause
        end %END imode
    end %END ikpt
%--------------------------------------------------------------------------
toc 
%--------------------------------------------------------------------------
end %END ifft
    
%Average over FFTS
    SED.SED = SED.SED/NMD.NUM_FFTS;
%Define frequencies
    omega = (1:NMD.NUM_OMEGAS)*(NMD.w_max/NMD.NUM_OMEGAS);
%Output SED
    for imode = 1:size(NMD.modelist(:,imslice),1)
        str_write_single=...
            strcat(NMD.str.main,'/',int2str(NMD.seed.superlattice),'/NMD/SED_',...
            num2str(NMD.modelist(imode,imslice)),...
            '_',int2str(iseed),'.txt');
        output(1:length(omega),1) = omega;
        output(1:length(omega),2) = SED.SED(1,:,imode);
        dlmwrite(str_write_single,output,'delimiter',' ');
        clear output
    end %END ikpt    
%end %END iseed


